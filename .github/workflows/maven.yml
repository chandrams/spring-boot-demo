# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: Java CI with Maven

on:
  push:
    branches: [ master ]
  
jobs:
  build:

    runs-on: ubuntu-latest
   
    strategy:
      matrix:
        java: [ '8' ]
       
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK ${{ matrix.java }}
      uses: actions/setup-java@v2
      with:
        java-version: ${{ matrix.java }}
        distribution: 'adopt'
        
    - name: Build with Maven
      run: mvn -B package --file pom.xml
      
    - name: docker login
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USER }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push
      id: docker_build
      uses: docker/build-push-action@v2
      with:
        push: true
        tags: chandra25ms/springboot-helloworld:latest

    - name: Authenticate and set context
      uses: redhat-actions/oc-login@v1
      env:
        # These can be stored in secrets, if desired.
        OPENSHIFT_USER: chandra25ms
        OPENSHIFT_NAMESPACE: chandra25ms-dev

      with:
        # URL to your OpenShift cluster.
        # Refer to Step 2.
        openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}

        # Authentication Token. Can use username and password instead.
        # Refer to Step 3.
        openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}

        # Credentials, if desired instead of token.
        # Username and password override token if they are set.
        #openshift_username: ${{ env.OPENSHIFT_USER }}
        #openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}

        # Disables SSL cert checking. Use this if you don't have the certificate authority data.
        insecure_skip_tls_verify: true
        # This method is more secure, if the certificate from Step 4 is available.
        #certificate_authority_data: ${{ secrets.CA_DATA }}

        # Optional - this sets your Kubernetes context's current namespace after logging in.
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
   
    - name: Create and expose app
      uses: redhat-actions/oc-new-app@v1
      with:
        app_name: petclinic
        image: docker.io/chandra25ms/springboot-helloworld:latest
        namespace: ${{ env.OPENSHIFT_NAMESPACE }}
        port: 8080
